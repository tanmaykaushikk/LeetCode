class Solution {
    public int subarraysWithKDistinct(int[] A, int K) {
        return atMostK(A, K) - atMostK(A, K - 1);
    }
    private int atMostK(int[] A, int K) {
        int count = 0;
        int left = 0;
        HashMap<Integer, Integer> freq = new HashMap<>();

        for (int right = 0; right < A.length; right++) {
            freq.put(A[right], freq.getOrDefault(A[right], 0) + 1);

            while (freq.size() > K) {
                freq.put(A[left], freq.get(A[left]) - 1);
                if (freq.get(A[left]) == 0) {
                    freq.remove(A[left]);
                }
                left++;
            }

            count += right - left + 1;
        }

        return count;
    }
}
